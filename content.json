{"meta":{"title":"Prodigal'Blog","subtitle":"Do what I wang do!","description":null,"author":"Prodigal","url":"https://henuajy.top","root":"/"},"pages":[{"title":"我的朋友们","date":"2019-05-13T23:48:18.289Z","updated":"2019-05-13T23:48:18.289Z","comments":true,"path":"friends/index.html","permalink":"https://henuajy.top/friends/index.html","excerpt":"","text":"互加友链请留言！"},{"title":"所有分类","date":"2019-05-13T01:31:55.436Z","updated":"2019-05-13T01:31:55.436Z","comments":false,"path":"categories/index.html","permalink":"https://henuajy.top/categories/index.html","excerpt":"","text":""},{"title":"我的开源项目","date":"2019-05-13T01:47:39.000Z","updated":"2019-05-13T03:39:47.829Z","comments":false,"path":"projects/index.html","permalink":"https://henuajy.top/projects/index.html","excerpt":"","text":"暂无"},{"title":"关于","date":"2019-05-13T03:04:40.857Z","updated":"2019-05-13T03:04:40.857Z","comments":true,"path":"about/index.html","permalink":"https://henuajy.top/about/index.html","excerpt":"","text":""},{"title":"归档","date":"2019-04-26T02:25:36.000Z","updated":"2019-05-13T01:32:05.434Z","comments":false,"path":"archives/index.html","permalink":"https://henuajy.top/archives/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-05-13T01:31:38.194Z","updated":"2019-05-13T01:31:38.194Z","comments":false,"path":"tags/index.html","permalink":"https://henuajy.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"广播接收器--发送自定义广播","slug":"广播接收器-发送自定义广播","date":"2019-05-14T23:20:37.000Z","updated":"2019-05-14T23:21:59.319Z","comments":true,"path":"2019/05/15/广播接收器-发送自定义广播/","link":"","permalink":"https://henuajy.top/2019/05/15/广播接收器-发送自定义广播/","excerpt":"一、发送标准广播1、首先要定义一个广播接收器MyBroadcastReceiver，继承BroadcastReceiver12345678910111213package com.henuajy.broadcasttest;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.widget.Toast;public class MyBroadcastReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; //收到广播后要执行的逻辑 &#125;&#125;","text":"一、发送标准广播1、首先要定义一个广播接收器MyBroadcastReceiver，继承BroadcastReceiver12345678910111213package com.henuajy.broadcasttest;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.widget.Toast;public class MyBroadcastReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; //收到广播后要执行的逻辑 &#125;&#125; 2、在AndroidManifest中注册此广播接收器，并添加自定义action1234567&lt;receiver android:name=\".MyBroadcastReceiver\" android:enabled=\"true\" android:exported=\"true\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"com.henuajy.broadcasttest.MY_BROADCAST\"/&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; 3、通过Intent发送广播12Intent intent = new Intent(\"com.henuajy.broadcasttest.MY_BROADCAST\");sendBroadcast(intent); 由于广播是使用Intent进行传递的，因此可以在Intent中携带一些数据传递给广播接收器。 二、发送有序广播1、注册广播接收器时，在receiver下的intent-filter标签添加android:priority属性，值越大，越优先接收到广播 12&lt;intent-filter android:priority=\"\"&gt;........ 2、在发送广播的逻辑中，不再用sendBroadcast()方法，而是用sendOrderedBroadcast()方法1sendOrderedBroadcast(intent,null); 在广播的发送方面，只需要改动这一行代码，sendOrderedBroadcast()方法接收两个参数，第一个依然是Intent，第二个参数是一个与权限相关的字符，这里传入null。","categories":[{"name":"Demo","slug":"Demo","permalink":"https://henuajy.top/categories/Demo/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://henuajy.top/tags/Android/"}]},{"title":"广播接收器——接收系统广播","slug":"广播接收器--接收系统广播","date":"2019-05-13T01:36:03.000Z","updated":"2019-05-14T00:26:06.416Z","comments":true,"path":"2019/05/13/广播接收器--接收系统广播/","link":"","permalink":"https://henuajy.top/2019/05/13/广播接收器--接收系统广播/","excerpt":"一、分类标准广播是一种完全异步执行的广播，在广播发出后，所有的广播接收器几乎会在同一时刻接受到这条广播消息，没有任何顺序而言。这种广播效率比较高，但是无法被截断。有序广播是一种同步执行的广播，在广播发出后，同一时刻只会有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。显而易见，这类广播是有先后顺序的，优先级高的广播接收器就可以先收到广播消息，并且前边的广播接收器可以截断正在传递的广播。","text":"一、分类标准广播是一种完全异步执行的广播，在广播发出后，所有的广播接收器几乎会在同一时刻接受到这条广播消息，没有任何顺序而言。这种广播效率比较高，但是无法被截断。有序广播是一种同步执行的广播，在广播发出后，同一时刻只会有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。显而易见，这类广播是有先后顺序的，优先级高的广播接收器就可以先收到广播消息，并且前边的广播接收器可以截断正在传递的广播。 二、动态注册接收系统广播就以监听网络变化为例吧！ 步骤1、声明网络权限1&lt;use-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt; 2、创建一个类NetworkChangeReceiver继承自BroadcastReceiver。3、创建一个IntentFilter实例，并为其添加一个值为android.net.conn.CONNECTIVITY_CHANGE的action。4、创建NetworkChangeReceiver的实例，然后调用registerReceiver()方法进行注册，同时传入NetworkChangeReceiver的实例和IntentFilter的实例。5、最后不要忘记取消注册广播接收器（因为此广播接收器为动态注册的）。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.henuajy.broadcasttest;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.support.v4.content.LocalBroadcastManager;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.Toast;public class MainActivity extends AppCompatActivity &#123; private IntentFilter intentFilter; private NetworkChangeReceiver netWorkChangeReceiver; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); intentFilter = new IntentFilter(); intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\"); netWorkChangeReceiver = new NetworkChangeReceiver(); registerReceiver(netWorkChangeReceiver,intentFilter); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); unregisterReceiver(netWorkChangeReceiver); &#125; class NetworkChangeReceiver extends BroadcastReceiver&#123; @Override public void onReceive(Context context, Intent intent) &#123; Toast.makeText(context,\"network chages\",Toast.LENGTH_SHORT).show(); &#125; &#125;&#125; 三、静态注册接收系统广播仍然以监听系统网络状态为例 步骤1、新建一个类NetworkChangeReceiver，继承BroadcastReceiver并重写onReceive()方法；1234567891011121314package com.henuajy.notificationtest;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.widget.Toast;public class NetworkChangeReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; //网络状态发生变化的逻辑 &#125;&#125; 2、在配置文件中的manifest标签下声明网络权限；1&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt; 3、在配置文件中的application标签下添加receiver并添加action–“android.net.conn.CONNECTIVITY_CHANGE”；12345678&lt;receiver android:name=\".NetworkStateReceiver\" android:enabled=\"true\" android:exported=\"true\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\"/&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; 注意Android系统为了保护用户设备的安全和隐私，做了严格的规定：如果程序需要进行一些对用户来书比较敏感的操作，就必须在配置文件中声明权限才可以，否则程序会直接崩溃。比如这里访问系统的网络状态就是需要声明权限的。 小补充如果想要判断网络状态是开启还是关闭，可用下列方法：1、通过getSystemService()【由于是关于网络状态的，所以要传入参数Context.CONNECTIVITY_SERVICE】方法获取ConnectionManager类的实例manager；2、通过调用manager的getActiveNetworkInfo()方法获取NetworkInfo类的实例info；3、通过info的isAvailable()【返回bool值】方法判断网络是否可用。12345678ConnectionManager manager = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo info = manager.getActiveNetworkInfo();if(info!=null&amp;&amp;info.isAvailable())&#123; //网络可用的逻辑&#125;else&#123; //网络不可用的逻辑&#125;","categories":[{"name":"Demo","slug":"Demo","permalink":"https://henuajy.top/categories/Demo/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://henuajy.top/tags/Android/"}]},{"title":"二叉树的层序遍历","slug":"二叉树的层序遍历","date":"2019-05-12T05:15:39.000Z","updated":"2019-05-16T08:13:06.076Z","comments":true,"path":"2019/05/12/二叉树的层序遍历/","link":"","permalink":"https://henuajy.top/2019/05/12/二叉树的层序遍历/","excerpt":"二叉树的层序遍历再网上搜索到的结果好多都是队列+while循环实现的，这里将while循环替换为递归。 层序遍历规则是：若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。如图：","text":"二叉树的层序遍历再网上搜索到的结果好多都是队列+while循环实现的，这里将while循环替换为递归。 层序遍历规则是：若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。如图： 代码实现1234567891011121314151617181920212223//模拟队列BiTree TreeQueue[1024];//队列int front = 0;//队头指针int rear = 0;//队尾指针int LevelOrderTraverse(BiTree T) &#123; if (T) &#123; cout &lt;&lt; T-&gt;data &lt;&lt; \" \"; if (T-&gt;lchild) &#123; TreeQueue[rear] = T-&gt;lchild; rear++; &#125; if (T-&gt;rchild) &#123; TreeQueue[rear] = T-&gt;rchild; rear++; &#125; if (front != rear) &#123; LevelOrderTraverse(TreeQueue[front++]); &#125; &#125;&#125;","categories":[{"name":"Test","slug":"Test","permalink":"https://henuajy.top/categories/Test/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://henuajy.top/tags/数据结构/"},{"name":"C++","slug":"C","permalink":"https://henuajy.top/tags/C/"}]},{"title":"JavaWeb学习之三层架构实例（三）","slug":"JavaWeb学习之三层架构实例（三）","date":"2019-04-28T07:37:00.000Z","updated":"2019-05-16T08:11:46.228Z","comments":true,"path":"2019/04/28/JavaWeb学习之三层架构实例（三）/","link":"","permalink":"https://henuajy.top/2019/04/28/JavaWeb学习之三层架构实例（三）/","excerpt":"引言通过上一篇博客JavaWeb学习之三层架构实例（二）我们基本上已经实现了对学生信息列表的增删改查操作（UI除外），但是不难看出，代码冗余度太高了，尤其是StudentDao这个类，其中的增删改查四个方法，同样都要连接数据库、获取statement等等。为此，我又对这个项目进行了有点点优化。 优化日志1、增加了两个接口 IStudentDao.java 、 IStudentService.java ；2、 StudentDao.java 和 StudentService.java 分别实现以上两个接口，并加入Impl后缀；3、 增加一个数据库帮助类 DBUtil.java，目的是简化Dao层代码量；","text":"引言通过上一篇博客JavaWeb学习之三层架构实例（二）我们基本上已经实现了对学生信息列表的增删改查操作（UI除外），但是不难看出，代码冗余度太高了，尤其是StudentDao这个类，其中的增删改查四个方法，同样都要连接数据库、获取statement等等。为此，我又对这个项目进行了有点点优化。 优化日志1、增加了两个接口 IStudentDao.java 、 IStudentService.java ；2、 StudentDao.java 和 StudentService.java 分别实现以上两个接口，并加入Impl后缀；3、 增加一个数据库帮助类 DBUtil.java，目的是简化Dao层代码量； 代码代码结构 数据库帮助类DBUtil.java这是一个通用的类，任何的数据库操作（增删改查），都可以通过这各类来实现（不仅仅是对student表的增删改查）；1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package com.ajy.util;import java.sql.*;//通用的数据库操作方法public class DBUtil &#123; private static String URL=\"jdbc:mysql://localhost:3306/anjiyubase?&amp;serverTimezone=UTC&amp;useSSL=false&amp;allowPublicKeyRetrieval=false\"; private static String DRIVER=\"com.mysql.cj.jdbc.Driver\"; private static String NAME=\"root\"; private static String PWD=\"121181\"; public static Connection con = null; public static PreparedStatement pstmt = null; public static ResultSet rs = null; /*** *增删改查四个功能，分两大块 * 第一块：增删改 * 第二块：查询 */ //实现增删改功能 public static boolean executeUpdate(String sql,Object[] objects)&#123; try &#123; createPreparedStatement(sql,objects).executeUpdate(); shutDownDB(null,pstmt,con); return true; &#125; catch (SQLException | ClassNotFoundException e) &#123; e.printStackTrace(); return false; &#125; &#125; //实现查询功能 public static ResultSet executeQuery(String sql,Object[] objects)&#123; try &#123; rs = createPreparedStatement(sql,objects).executeQuery(); return rs; &#125; catch (SQLException | ClassNotFoundException e) &#123; e.printStackTrace(); return null; &#125; &#125; public static void shutDownDB(ResultSet rs,Statement stmt,Connection con) throws SQLException &#123; if (rs!=null)rs.close(); if (stmt!=null)stmt.close(); if (con!=null)con.close(); &#125; public static Connection getConnection() throws SQLException, ClassNotFoundException &#123; Class.forName(DRIVER); return DriverManager.getConnection(URL,NAME,PWD); &#125; public static PreparedStatement createPreparedStatement(String sql,Object[] objects) throws SQLException, ClassNotFoundException &#123; pstmt = getConnection().prepareStatement(sql); if (objects != null) &#123; for (int i = 0; i &lt; objects.length; i++) &#123; pstmt.setObject(i + 1, objects[i]); &#125; &#125; return pstmt; &#125;&#125; 学生类Student.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package com.ajy.entity;public class Student &#123; private int stuNo; private String stuName; private int stuAge; private String stuAddress; public Student(int stuNo,String stuName,int stuAge,String stuAddress)&#123; this.stuNo = stuNo; this.stuName = stuName; this.stuAge = stuAge; this.stuAddress = stuAddress; &#125; public Student(String stuName,int stuAge,String stuAddress)&#123; this.stuNo = stuNo; this.stuName = stuName; this.stuAge = stuAge; this.stuAddress = stuAddress; &#125; public int getStuNo() &#123; return stuNo; &#125; public void setStuNo(int stuNo) &#123; this.stuNo = stuNo; &#125; public String getStuName() &#123; return stuName; &#125; public void setStuName(String stuName) &#123; this.stuName = stuName; &#125; public int getStuAge() &#123; return stuAge; &#125; public void setStuAge(int stuAge) &#123; this.stuAge = stuAge; &#125; public String getStuAddress() &#123; return stuAddress; &#125; public void setStuAddress(String stuAddress) &#123; this.stuAddress = stuAddress; &#125; @Override public String toString() &#123; return getStuNo()+\"--\"+getStuName()+\"--\"+getStuAge()+\"--\"+getStuAddress(); &#125;&#125; 数据访问层接口IStudentDao.java 1234567891011121314151617181920212223package com.ajy.dao;import com.ajy.entity.Student;import java.util.List;public interface IStudentDao &#123; public boolean addStudent(Student stu); //查询学生是否存在 public boolean isExits(int stuNo); //查询学生 public Student queryStudent(int stuNo); //查询全部学生 public List&lt;Student&gt; queryAll(); //根据学号删除学生 public boolean deleteStudentBySno(int Sno); //根据学号修改学号对应的学生信息 public boolean updateStudentBySno(int sno,Student stu);&#125; 实现类StudentDaoImpl.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586package com.ajy.dao.impl;import com.ajy.dao.IStudentDao;import com.ajy.entity.Student;import com.ajy.util.DBUtil;import java.sql.*;import java.util.ArrayList;import java.util.List;public class StudentDaoImpl implements IStudentDao &#123; //增加学生信息 public boolean addStudent(Student stu)&#123; String sql = \"insert into student values(?,?,?,?)\"; Object[] objects = &#123;stu.getStuNo(),stu.getStuName(),stu.getStuAge(),stu.getStuAddress()&#125;; return DBUtil.executeUpdate(sql,objects); &#125; //查询学生是否存在 public boolean isExits(int stuNo)&#123; return queryStudent(stuNo)==null?false:true; &#125; //查询学生 public Student queryStudent(int stuNo)&#123; String sql = \"select *from student where sno=?\"; Object[] objects = &#123;stuNo&#125;; ResultSet rs = DBUtil.executeQuery(sql,objects); try &#123; if (rs.next())&#123; int sno = rs.getInt(\"sno\"); String sname = rs.getString(\"sname\"); int sage = rs.getInt(\"sage\"); String saddress= rs.getString(\"saddress\"); return new Student(sno,sname,sage,saddress); &#125;else&#123; return null; &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125; &#125; //查询全部学生 public List&lt;Student&gt; queryAll()&#123; String sql = \"select*from student\"; ResultSet rs = DBUtil.executeQuery(sql,null); try&#123; List&lt;Student&gt; list = new ArrayList&lt;&gt;(); while (rs.next())&#123; int sno = rs.getInt(\"sno\"); String sname = rs.getString(\"sname\"); int sage = rs.getInt(\"sage\"); String saddress= rs.getString(\"saddress\"); list.add(new Student(sno,sname,sage,saddress)); &#125; return list; &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125;finally &#123; try &#123; DBUtil.shutDownDB(DBUtil.rs,DBUtil.pstmt,DBUtil.con); &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125; &#125; &#125; //根据学号删除学生 public boolean deleteStudentBySno(int Sno)&#123; String sql = \"delete from student where sno=?\"; Object[] objects = &#123;Sno&#125;; return DBUtil.executeUpdate(sql,objects); &#125; //根据学号修改学号对应的学生信息 public boolean updateStudentBySno(int sno,Student stu)&#123; String sql = \"update student set sname=?,sage=?,saddress=? where sno=?\"; Object[] objects = &#123;stu.getStuName(),stu.getStuAge(),stu.getStuAddress(),sno&#125;; return DBUtil.executeUpdate(sql,objects); &#125;&#125; 业务逻辑层接口IStudentService.java 123456789101112131415161718192021package com.ajy.service;import com.ajy.entity.Student;import java.util.List;public interface IStudentService &#123; //增加学生 public boolean addStudent(Student stu); //根据学号删除学生 public boolean deleteStudentBySno(int sno); //根据学号查询学生 public Student queryStudentBySno(int sno); //根据学号，更新对应的学生 public boolean updateStudentBySno(int sno,Student stu); //查询全部学生 public List&lt;Student&gt; queryStudentAll();&#125; 实现类StudentServiceImpl.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.ajy.service.impl;import com.ajy.dao.IStudentDao;import com.ajy.dao.impl.StudentDaoImpl;import com.ajy.entity.Student;import com.ajy.service.IStudentService;import java.util.List;public class StudentServiceImpl implements IStudentService &#123; IStudentDao studentDao = new StudentDaoImpl(); //增加学生 public boolean addStudent(Student stu)&#123; if (!studentDao.isExits(stu.getStuNo()))&#123; return studentDao.addStudent(stu); &#125;else&#123; return false; &#125; &#125; //根据学号删除学生 public boolean deleteStudentBySno(int sno)&#123; //先判断学生是否存在 if(!studentDao.isExits(sno))&#123; return false; &#125;else&#123; return studentDao.deleteStudentBySno(sno); &#125; &#125; //根据学号查询学生 public Student queryStudentBySno(int sno)&#123; return studentDao.queryStudent(sno); &#125; //根据学号，更新对应的学生 public boolean updateStudentBySno(int sno,Student stu)&#123; //先判断此学号对应的学生是否存在 if(!studentDao.isExits(sno))&#123; return false; &#125;else&#123; return studentDao.updateStudentBySno(sno,stu); &#125; &#125; //查询全部学生 public List&lt;Student&gt; queryStudentAll()&#123; return studentDao.queryAll(); &#125;&#125; 视图层后端代码AddStudentServlet.java1234567891011121314151617181920212223242526272829303132333435363738package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.IStudentService;import com.ajy.service.impl.StudentServiceImpl;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = \"AddStudentServlet\",value = \"/AddStudentServlet\")public class AddStudentServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); int stuNo = Integer.parseInt(request.getParameter(\"stuNo\")); String stuName = request.getParameter(\"stuName\"); int stuAge = Integer.parseInt(request.getParameter(\"stuAge\")); String stuAddress = request.getParameter(\"stuAddress\"); Student stu = new Student(stuNo,stuName,stuAge,stuAddress); IStudentService addStudentService = new StudentServiceImpl(); boolean res = addStudentService.addStudent(stu); if (res)&#123; request.setAttribute(\"res\",\"添加成功\"); &#125;else&#123; request.setAttribute(\"res\",\"添加失败\"); &#125; request.getRequestDispatcher(\"QueryAllStudents\").forward(request,response); &#125;&#125; DeleteStudentServlet.java12345678910111213141516171819202122232425262728293031323334package com.ajy.servlet;import com.ajy.service.IStudentService;import com.ajy.service.impl.StudentServiceImpl;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = \"DeleteStudentServlet\",value = \"/DeleteStudentServlet\")public class DeleteStudentServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); //根据学号删除学生 int sno = Integer.parseInt(request.getParameter(\"sno\")); IStudentService studentService = new StudentServiceImpl(); boolean res = studentService.deleteStudentBySno(sno); if (res)&#123; request.setAttribute(\"res\",\"删除成功\"); &#125;else&#123; request.setAttribute(\"res\",\"删除失败\"); &#125; request.getRequestDispatcher(\"QueryAllStudents\").forward(request,response); &#125;&#125; QueryAllStudents.java12345678910111213141516171819202122232425262728package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.IStudentService;import com.ajy.service.impl.StudentServiceImpl;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet(name = \"QueryAllStudents\",value = \"/QueryAllStudents\")public class QueryAllStudents extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); IStudentService studentService = new StudentServiceImpl(); List&lt;Student&gt; studentList = studentService.queryStudentAll(); request.setAttribute(\"students\",studentList); request.getRequestDispatcher(\"studentlist.jsp\").forward(request,response); &#125;&#125; QueryStudentBySno.java12345678910111213141516171819202122232425262728package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.IStudentService;import com.ajy.service.impl.StudentServiceImpl;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = \"QueryStudentBySno\",value = \"/QueryStudentBySno\")public class QueryStudentBySno extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); IStudentService studentService = new StudentServiceImpl(); int sno = Integer.parseInt(request.getParameter(\"sno\")); Student stu = studentService.queryStudentBySno(sno); request.setAttribute(\"student\",stu); request.getRequestDispatcher(\"updateinfo.jsp\").forward(request,response); &#125;&#125; UpdateStudentBySnoServlet.java123456789101112131415161718192021222324252627282930313233343536package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.IStudentService;import com.ajy.service.impl.StudentServiceImpl;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = \"UpdateStudentBySnoServlet\",value = \"/UpdateStudentBySnoServlet\")public class UpdateStudentBySnoServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); IStudentService studentService = new StudentServiceImpl(); int sno = Integer.parseInt(request.getParameter(\"sno\")); String sname = request.getParameter(\"sname\"); int sage = Integer.parseInt(request.getParameter(\"sage\")); String saddress = request.getParameter(\"saddress\"); Student student = new Student(sname,sage,saddress); boolean res = studentService.updateStudentBySno(sno,student); if (res)&#123; request.setAttribute(\"res\",\"修改成功\"); &#125;else&#123; request.setAttribute(\"res\",\"修改失败\"); &#125; request.getRequestDispatcher(\"QueryAllStudents\").forward(request,response); &#125;&#125; 前端代码前端代码没有改动,这里就不贴了.","categories":[{"name":"Demo","slug":"Demo","permalink":"https://henuajy.top/categories/Demo/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://henuajy.top/tags/Java/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://henuajy.top/tags/JavaWeb/"}]},{"title":"JavaWeb学习之三层架构实例（二）","slug":"JavaWeb学习之三层架构实例（二）","date":"2019-04-27T15:36:09.000Z","updated":"2019-05-16T07:57:39.549Z","comments":true,"path":"2019/04/27/JavaWeb学习之三层架构实例（二）/","link":"","permalink":"https://henuajy.top/2019/04/27/JavaWeb学习之三层架构实例（二）/","excerpt":"引言这个实例是上一个实例JavaWeb学习 三层架构实例（一）的加强版，实现的是在前端对数据库中student表的 增、删、改、查 操作。关于三层组成云云，这里就不再叙述。 实例效果图先来看一下主页，将student表中的数据列出来，这里隐藏了地址信息（saddress）。","text":"引言这个实例是上一个实例JavaWeb学习 三层架构实例（一）的加强版，实现的是在前端对数据库中student表的 增、删、改、查 操作。关于三层组成云云，这里就不再叙述。 实例效果图先来看一下主页，将student表中的数据列出来，这里隐藏了地址信息（saddress）。 这是添加学生信息的页面 这是修改学生信息的页面（学号不可修改） 由于删除学生信息不需要跳转，所以没有删除学生信息的页面。这几个功能的操作结果都会在主页的左上角显示。 项目结构 如图,自上到下,StudentDao.java 是直接对数据库进行增删改查操作的,属于原子性的操作,没有逻辑性,只是简单的增删改查.比如,它并不会在删除某条信息之前先判断这条信息是否存在.Student.java 是”学生”类,此类拥有诸如学号、姓名、年龄、地址等信息以及对应的getter和setter方法。StudentService.java 这个类，名子含义有点模糊，属于service层，同样是对数据库进行增删改查操作，与上面的Dao类不同的是，service层的操作具有逻辑性，就拿添加学生信息来说，service会先调用Dao类的查询方法，先判断这个学生是否存在，根据结果进行信息插入操作。Servlet包 易发现,这个包中存放的都是Servlet类,属于视图层的后端,每一个类每一个类对应一个视图层前端的功能(增删改查); 代码Student.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.ajy.entity;public class Student &#123; private int stuNo; private String stuName; private int stuAge; private String stuAddress; public Student(int stuNo,String stuName,int stuAge,String stuAddress)&#123; this.stuNo = stuNo; this.stuName = stuName; this.stuAge = stuAge; this.stuAddress = stuAddress; &#125; public Student(String stuName,int stuAge,String stuAddress)&#123; this.stuNo = stuNo; this.stuName = stuName; this.stuAge = stuAge; this.stuAddress = stuAddress; &#125; public int getStuNo() &#123; return stuNo; &#125; public void setStuNo(int stuNo) &#123; this.stuNo = stuNo; &#125; public String getStuName() &#123; return stuName; &#125; public void setStuName(String stuName) &#123; this.stuName = stuName; &#125; public int getStuAge() &#123; return stuAge; &#125; public void setStuAge(int stuAge) &#123; this.stuAge = stuAge; &#125; public String getStuAddress() &#123; return stuAddress; &#125; public void setStuAddress(String stuAddress) &#123; this.stuAddress = stuAddress; &#125; @Override public String toString() &#123; return getStuNo()+\"--\"+getStuName()+\"--\"+getStuAge()+\"--\"+getStuAddress(); &#125;&#125; StudentDao.javapackage com.ajy.dao;import com.ajy.entity.Student;import java.sql.*;import java.util.ArrayList;import java.util.List;public class StudentDao &#123; private final String URL=\"jdbc:mysql://localhost:3306/anjiyubase?&amp;serverTimezone=UTC&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\"; private final String DRIVER=\"com.mysql.cj.jdbc.Driver\"; private final String NAME=\"root\"; private final String PWD=\"121181\"; //增加学生信息 public boolean addStudent(Student stu)&#123; Connection con = null; PreparedStatement pstmt = null; int count = 0; try &#123; Class.forName(DRIVER); con = DriverManager.getConnection(URL,NAME,PWD); String sql = \"insert into student values(?,?,?,?)\"; pstmt = con.prepareStatement(sql); pstmt.setInt(1,stu.getStuNo()); pstmt.setString(2,stu.getStuName()); pstmt.setInt(3,stu.getStuAge()); pstmt.setString(4,stu.getStuAddress()); count = pstmt.executeUpdate(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); return false; &#125; catch (SQLException e) &#123; e.printStackTrace(); return false; &#125;finally &#123; try &#123; if (pstmt!=null)pstmt.close(); if (con!=null)con.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); return false; &#125; &#125; if(count==0)&#123; return false; &#125;else&#123; return true; &#125; &#125; //查询学生是否存在 public boolean isExits(int stuNo)&#123; return queryStudent(stuNo)==null?false:true; &#125; //查询学生 public Student queryStudent(int stuNo)&#123; Connection con = null; PreparedStatement pstmt = null; ResultSet rs = null; Student stu = null; int count = 0; try &#123; Class.forName(DRIVER); con = DriverManager.getConnection(URL,NAME,PWD); String sql = \"select * from student where sno=?\"; pstmt = con.prepareStatement(sql); pstmt.setInt(1,stuNo); rs = pstmt.executeQuery(); if (rs.next())&#123; stu = new Student(rs.getInt(\"sno\"), rs.getString(\"sname\"), rs.getInt(\"sage\"), rs.getString(\"saddress\")); &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); return null; &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125;finally &#123; try &#123; if (rs!=null)rs.close(); if (pstmt!=null)pstmt.close(); if (con!=null)con.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125; &#125; return stu; &#125; //查询全部学生 public List&lt;Student&gt; queryAll()&#123; Connection con = null; Statement stmt = null; ResultSet rs = null; List&lt;Student&gt; list = new ArrayList&lt;&gt;(); try &#123; Class.forName(DRIVER); con = DriverManager.getConnection(URL,NAME,PWD); String sql = \"select *from student\"; stmt = con.createStatement(); rs = stmt.executeQuery(sql); while (rs.next())&#123; int sno = rs.getInt(\"sno\"); String sname = rs.getString(\"sname\"); int sage = rs.getInt(\"sage\"); String saddress = rs.getString(\"saddress\"); list.add(new Student(sno,sname,sage,saddress)); &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); return null; &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125;finally &#123; try &#123; if (rs!=null)rs.close(); if (stmt!=null)stmt.close(); if (con!=null)con.close(); return list; &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125; &#125; &#125; //根据学号删除学生 public boolean deleteStudentBySno(int Sno)&#123; Connection con = null; PreparedStatement pstmt = null; int count = 0; try &#123; Class.forName(DRIVER); con = DriverManager.getConnection(URL,NAME,PWD); String sql = \"delete from student where sno=?\"; pstmt = con.prepareStatement(sql); pstmt.setInt(1,Sno); count = pstmt.executeUpdate(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); return false; &#125; catch (SQLException e) &#123; e.printStackTrace(); return false; &#125;finally &#123; try &#123; if (pstmt!=null)pstmt.close(); if (con!=null)con.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); return false; &#125; &#125; if(count==0)&#123; return false; &#125;else&#123; return true; &#125; &#125; //根据学号修改学号对应的学生信息 public boolean updateStudentBySno(int sno,Student stu)&#123; Connection con = null; PreparedStatement pstmt = null; int count = 0; try &#123; Class.forName(DRIVER); con = DriverManager.getConnection(URL,NAME,PWD); String sql = \"update student set sname=?,sage=?,saddress=? where sno=?\"; pstmt = con.prepareStatement(sql); //要修改的人 pstmt.setInt(4,sno); //修改该后的内容 pstmt.setString(1,stu.getStuName()); pstmt.setInt(2,stu.getStuAge()); pstmt.setString(3,stu.getStuAddress()); count = pstmt.executeUpdate(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); return false; &#125; catch (SQLException e) &#123; e.printStackTrace(); return false; &#125;finally &#123; try &#123; if (pstmt!=null)pstmt.close(); if (con!=null)con.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); return false; &#125; &#125; if(count==0)&#123; return false; &#125;else&#123; return true; &#125; &#125;&#125; StudentService 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.ajy.service;import com.ajy.dao.StudentDao;import com.ajy.entity.Student;import java.util.List;public class StudentService &#123; StudentDao studentDao = new StudentDao(); //增加学生 public boolean addStudent(Student stu)&#123; if (!studentDao.isExits(stu.getStuNo()))&#123; return studentDao.addStudent(stu); &#125;else&#123; return false; &#125; &#125; //根据学号删除学生 public boolean deleteStudentBySno(int sno)&#123; //先判断学生是否存在 if(!studentDao.isExits(sno))&#123; return false; &#125;else&#123; return studentDao.deleteStudentBySno(sno); &#125; &#125; //根据学号查询学生 public Student queryStudentBySno(int sno)&#123; return studentDao.queryStudent(sno); &#125; //根据学号，更新对应的学生 public boolean updateStudentBySno(int sno,Student stu)&#123; //先判断此学号对应的学生是否存在 if(!studentDao.isExits(sno))&#123; return false; &#125;else&#123; return studentDao.updateStudentBySno(sno,stu); &#125; &#125; //查询全部学生 public List&lt;Student&gt; queryStudentAll()&#123; return studentDao.queryAll(); &#125;&#125; QueryAllStudents.java 12345678910111213141516171819202122232425262728293031package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.StudentService;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;import java.util.List;@WebServlet(name = \"QueryAllStudents\",value = \"/QueryAllStudents\")public class QueryAllStudents extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); StudentService studentService = new StudentService(); List&lt;Student&gt; studentList = studentService.queryStudentAll(); request.setAttribute(\"students\",studentList); request.getRequestDispatcher(\"studentlist.jsp\").forward(request,response); &#125;&#125; AddStudentServlet.java123456789101112131415161718192021222324252627282930313233343536373839package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.StudentService;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = \"AddStudentServlet\",value = \"/AddStudentServlet\")public class AddStudentServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); int stuNo = Integer.parseInt(request.getParameter(\"stuNo\")); String stuName = request.getParameter(\"stuName\"); int stuAge = Integer.parseInt(request.getParameter(\"stuAge\")); String stuAddress = request.getParameter(\"stuAddress\"); Student stu = new Student(stuNo,stuName,stuAge,stuAddress); StudentService addStudentService = new StudentService(); boolean res = addStudentService.addStudent(stu); if (res)&#123; request.setAttribute(\"res\",\"添加成功\"); &#125;else&#123; request.setAttribute(\"res\",\"添加失败\"); &#125; request.getRequestDispatcher(\"QueryAllStudents\").forward(request,response); &#125;&#125; DeleteStudentServlet.java123456789101112131415161718192021222324252627282930313233343536package com.ajy.servlet;import com.ajy.service.StudentService;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = \"DeleteStudentServlet\",value = \"/DeleteStudentServlet\")public class DeleteStudentServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); //根据学号删除学生 int sno = Integer.parseInt(request.getParameter(\"sno\")); StudentService studentService = new StudentService(); boolean res = studentService.deleteStudentBySno(sno); response.setContentType(\"text/html;charset=utf-8\"); response.setCharacterEncoding(\"utf-8\"); PrintWriter out = response.getWriter(); if (res)&#123; request.setAttribute(\"res\",\"删除成功\"); &#125;else&#123; request.setAttribute(\"res\",\"删除失败\"); &#125; request.getRequestDispatcher(\"QueryAllStudents\").forward(request,response); &#125;&#125; UpdateStudentBySnoServlet.java12345678910111213141516171819202122232425262728293031323334353637package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.StudentService;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = \"UpdateStudentBySnoServlet\",value = \"/UpdateStudentBySnoServlet\")public class UpdateStudentBySnoServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); StudentService studentService = new StudentService(); int sno = Integer.parseInt(request.getParameter(\"sno\")); String sname = request.getParameter(\"sname\"); int sage = Integer.parseInt(request.getParameter(\"sage\")); String saddress = request.getParameter(\"saddress\"); Student student = new Student(sname,sage,saddress); boolean res = studentService.updateStudentBySno(sno,student); if (res)&#123; request.setAttribute(\"res\",\"修改成功\"); &#125;else&#123; request.setAttribute(\"res\",\"修改失败\"); &#125; request.getRequestDispatcher(\"QueryAllStudents\").forward(request,response); &#125;&#125; QueryStudentBySno.java12345678910111213141516171819202122232425262728package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.StudentService;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = \"QueryStudentBySno\",value = \"/QueryStudentBySno\")public class QueryStudentBySno extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); StudentService studentService = new StudentService(); int sno = Integer.parseInt(request.getParameter(\"sno\")); Student stu = studentService.queryStudentBySno(sno); request.setAttribute(\"student\",stu); request.getRequestDispatcher(\"updateinfo.jsp\").forward(request,response); &#125;&#125; addstudent.jsp1234567891011121314151617&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;添加学生&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"AddStudentServlet\" method=\"post\"&gt; 学号：&lt;input type=\"number\" name=\"stuNo\"&gt;&lt;br&gt; 姓名：&lt;input type=\"text\" name=\"stuName\"&gt;&lt;br&gt; 年龄：&lt;input type=\"number\" name=\"stuAge\"&gt;&lt;br&gt; 地址：&lt;input type=\"text\" name=\"stuAddress\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"提交\"&gt;&lt;br&gt;&lt;/form&gt;&lt;a href=\"QueryAllStudents\"&gt;返回首页&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; studentlist.jsp12345678910111213141516171819202122232425262728293031323334353637383940&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;学生信息列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;% String operateResult = (String) request.getAttribute(\"res\"); if (operateResult!=null)&#123; out.print(operateResult); &#125;else&#123; out.print(\"&lt;br&gt;\"); &#125; %&gt; &lt;table border=\"1px\"&gt; &lt;tr&gt; &lt;th&gt;学号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;% List&lt;Student&gt; studentList = (List&lt;Student&gt;) request.getAttribute(\"students\"); for (Student student:studentList)&#123; %&gt; &lt;tr&gt; &lt;td&gt;&lt;%=student.getStuNo()%&gt;&lt;/td&gt; &lt;td&gt;&lt;%=student.getStuName()%&gt;&lt;/td&gt; &lt;td&gt;&lt;%=student.getStuAge()%&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=\"QueryStudentBySno?sno=&lt;%=student.getStuNo()%&gt;\"&gt;修改&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=\"DeleteStudentServlet?sno=&lt;%=student.getStuNo()%&gt;\"&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;% &#125; %&gt; &lt;/table&gt; &lt;a href=\"addstudent.jsp\"&gt;增加&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; updateinfo.jsp1234567891011121314151617181920&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;学生个人信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;% Student stu = (Student) request.getAttribute(\"student\");%&gt; &lt;form action=\"UpdateStudentBySnoServlet\" method=\"post\"&gt; 学号：&lt;input type=\"number\" name=\"sno\" value=\"&lt;%=stu.getStuNo()%&gt;\"&gt;&lt;br&gt; 姓名：&lt;input type=\"text\" name=\"sname\" value=\"&lt;%=stu.getStuName()%&gt;\"&gt;&lt;br&gt; 年龄：&lt;input type=\"number\" name=\"sage\" value=\"&lt;%=stu.getStuAge()%&gt;\"&gt;&lt;br&gt; 地址：&lt;input type=\"text\" name=\"saddress\" value=\"&lt;%=stu.getStuAddress()%&gt;\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"提交\"&gt;&lt;br&gt; &lt;/form&gt; &lt;a href=\"QueryAllStudents\"&gt;返回首页&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Demo","slug":"Demo","permalink":"https://henuajy.top/categories/Demo/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://henuajy.top/tags/Java/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://henuajy.top/tags/JavaWeb/"}]},{"title":"JavaWeb学习之三层架构实例（一）","slug":"JavaWeb学习之三层架构实例（一）","date":"2019-04-25T13:59:59.000Z","updated":"2019-05-16T07:51:28.232Z","comments":true,"path":"2019/04/25/JavaWeb学习之三层架构实例（一）/","link":"","permalink":"https://henuajy.top/2019/04/25/JavaWeb学习之三层架构实例（一）/","excerpt":"一、三层组成A.表示层（也称视图层）前台对应于MVC中的View;后台对应于MVC中的Controller，用于控制跳转、调用业务逻辑层Servlet;B.业务逻辑层(Service层)接受表示层的请求;组装数据访问层,进行的操作是逻辑性的C.数据访问层(Dao层)直接访问数据库的操作,原子性的操作(增删改查);","text":"一、三层组成A.表示层（也称视图层）前台对应于MVC中的View;后台对应于MVC中的Controller，用于控制跳转、调用业务逻辑层Servlet;B.业务逻辑层(Service层)接受表示层的请求;组装数据访问层,进行的操作是逻辑性的C.数据访问层(Dao层)直接访问数据库的操作,原子性的操作(增删改查); D.三层之间的关系:上层将请求传递给下层,下层处理后,返回给上层 二、实例—在前台向数据库插入学生信息首先,在这个实例中,学生信息包括学号、姓名、年龄、地址这四个方面用户在前台输入这些信息点击提交后，向业务逻辑层发出请求，业务逻辑层通过调用数据访问层的方法，先调用查询操作，判断此学生是否在数据库已经存在；若不存在则接着调用插入操作，并把操作结果返回值表示层。 运行结果先看一下数据库中已存在的学生信息 添加一个已经存在的学生 添加一个不存在的学生 添加成功后的数据库表信息 代码实现项目结构 index.jsp123456789101112131415&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;添加学生&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=\"AddStudentServlet\" method=\"post\"&gt; 学号：&lt;input type=\"number\" name=\"stuNo\"&gt;&lt;br&gt; 姓名：&lt;input type=\"text\" name=\"stuName\"&gt;&lt;br&gt; 年龄：&lt;input type=\"number\" name=\"stuAge\"&gt;&lt;br&gt; 地址：&lt;input type=\"text\" name=\"stuAddress\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"提交\"&gt;&lt;br&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; AddStudentServlet.java123456789101112131415161718192021222324252627282930313233343536373839package com.ajy.servlet;import com.ajy.entity.Student;import com.ajy.service.AddStudentService;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = \"AddStudentServlet\",value = \"/AddStudentServlet\")public class AddStudentServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"utf-8\"); int stuNo = Integer.parseInt(request.getParameter(\"stuNo\")); String stuName = request.getParameter(\"stuName\"); int stuAge = Integer.parseInt(request.getParameter(\"stuAge\")); String stuAddress = request.getParameter(\"stuAddress\"); Student stu = new Student(stuNo,stuName,stuAge,stuAddress); AddStudentService addStudentService = new AddStudentService(); boolean res = addStudentService.addStudent(stu); response.setContentType(\"text/html;charset=utf-8\"); response.setCharacterEncoding(\"utf-8\"); PrintWriter out = response.getWriter(); if (res)&#123; out.print(\"添加成功\"); &#125;else&#123; out.print(\"添加失败\"); &#125; &#125;&#125; AddStudentService.java12345678910111213141516package com.ajy.service;import com.ajy.dao.StudentDao;import com.ajy.entity.Student;public class AddStudentService &#123; StudentDao studentDao = new StudentDao(); public boolean addStudent(Student stu)&#123; if (!studentDao.isExits(stu))&#123; return studentDao.addStudent(stu); &#125;else&#123; return false; &#125; &#125;&#125; StudentDao.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990package com.ajy.dao;import com.ajy.entity.Student;import java.sql.*;public class StudentDao &#123; private final String URL=\"jdbc:mysql://localhost:3306/anjiyubase?&amp;serverTimezone=UTC&amp;useSSL=false\"; private final String DRIVER=\"com.mysql.cj.jdbc.Driver\"; private final String NAME=\"root\"; private final String PWD=\"121181\"; public boolean isExits(Student stu)&#123; return queryStudent(stu.getStuNo())==null?false:true; &#125; public boolean addStudent(Student stu)&#123; Connection con = null; PreparedStatement pstmt = null; int count = 0; try &#123; Class.forName(DRIVER); con = DriverManager.getConnection(URL,NAME,PWD); String sql = \"insert into student values(?,?,?,?)\"; pstmt = con.prepareStatement(sql); pstmt.setInt(1,stu.getStuNo()); pstmt.setString(2,stu.getStuName()); pstmt.setInt(3,stu.getStuAge()); pstmt.setString(4,stu.getStuAddress()); count = pstmt.executeUpdate(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); return false; &#125; catch (SQLException e) &#123; e.printStackTrace(); return false; &#125;finally &#123; try &#123; if (pstmt!=null)pstmt.close(); if (con!=null)con.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); return false; &#125; &#125; if(count==0)&#123; return false; &#125;else&#123; return true; &#125; &#125; public Student queryStudent(int stuNo)&#123; Connection con = null; PreparedStatement pstmt = null; ResultSet rs = null; Student stu = null; int count = 0; try &#123; Class.forName(DRIVER); con = DriverManager.getConnection(URL,NAME,PWD); String sql = \"select * from student where sno=?\"; pstmt = con.prepareStatement(sql); pstmt.setInt(1,stuNo); rs = pstmt.executeQuery(); if (rs.next())&#123; stu = new Student(rs.getInt(\"sno\"), rs.getString(\"sname\"), rs.getInt(\"sage\"), rs.getString(\"saddress\")); &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); return null; &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125;finally &#123; try &#123; if (rs!=null)rs.close(); if (pstmt!=null)pstmt.close(); if (con!=null)con.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); return null; &#125; &#125; return stu; &#125;&#125; Student.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.ajy.entity;public class Student &#123; private int stuNo; private String stuName; private int stuAge; private String stuAddress; public Student(int stuNo,String stuName,int stuAge,String stuAddress)&#123; this.stuNo = stuNo; this.stuName = stuName; this.stuAge = stuAge; this.stuAddress = stuAddress; &#125; public int getStuNo() &#123; return stuNo; &#125; public void setStuNo(int stuNo) &#123; this.stuNo = stuNo; &#125; public String getStuName() &#123; return stuName; &#125; public void setStuName(String stuName) &#123; this.stuName = stuName; &#125; public int getStuAge() &#123; return stuAge; &#125; public void setStuAge(int stuAge) &#123; this.stuAge = stuAge; &#125; public String getStuAddress() &#123; return stuAddress; &#125; public void setStuAddress(String stuAddress) &#123; this.stuAddress = stuAddress; &#125;&#125;","categories":[{"name":"Demo","slug":"Demo","permalink":"https://henuajy.top/categories/Demo/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://henuajy.top/tags/Java/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://henuajy.top/tags/JavaWeb/"}]},{"title":"JavaWeb学习 MVC模式登录实例","slug":"基于Servlet的MVC模式用户登录实例","date":"2019-04-25T13:56:35.000Z","updated":"2019-05-16T07:46:05.868Z","comments":true,"path":"2019/04/25/基于Servlet的MVC模式用户登录实例/","link":"","permalink":"https://henuajy.top/2019/04/25/基于Servlet的MVC模式用户登录实例/","excerpt":"一、关于MVC模式的简单解释M Model，模型层，例如登录实例中，用于处理登录操作的类；V View，视图层，用于展示以及与用户交互。使用html、js、css、jsp、jQuery等前端技术实现；C Controller，控制器，接受视图层的请求，将请求跳转到对应的模型进行处理，模型层处理完毕后，再将结果返回给请求处。这里用Servlet实现控制器。","text":"一、关于MVC模式的简单解释M Model，模型层，例如登录实例中，用于处理登录操作的类；V View，视图层，用于展示以及与用户交互。使用html、js、css、jsp、jQuery等前端技术实现；C Controller，控制器，接受视图层的请求，将请求跳转到对应的模型进行处理，模型层处理完毕后，再将结果返回给请求处。这里用Servlet实现控制器。 二、实现过程分析用户再视图层输入用户名以及密码点击提交，向控制器发出请求控制器（Servlet）接受请求，将接受到的用户名以及密码转给模型层模型层依据用户名和密码在数据库中进行查询，将操作结果返回给控制器控制器经过判断返回给用户登录结果。 三、代码实现项目结构图#### 视图层实现(index.jsp)12345678910111213&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Login&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=\"LoginServlet\" method=\"post\"&gt; Name:&lt;input type=\"text\" name=\"uname\"&gt;&lt;br&gt; Pass:&lt;input type=\"password\" name=\"upwd\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"Login\"&gt;&lt;br&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;#### 控制器层实现(LoginServlet)1234567891011121314151617181920212223242526272829303132333435363738package com.ajy.Servlet;import com.ajy.Model.LoginDao;import com.ajy.Entity.User;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;//控制器层public class LoginServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request,response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //处理post方式登录请求 request.setCharacterEncoding(\"utf-8\"); String uname = request.getParameter(\"uname\"); String upwd = request.getParameter(\"upwd\"); User user = new User(uname,upwd); response.setContentType(\"text/html;charset=utf-8\"); response.setCharacterEncoding(\"utf-8\"); PrintWriter out = response.getWriter(); int rs = LoginDao.Login(user); if(rs==-1)&#123; out.println(\"系统错误\"); &#125;else if(rs==0)&#123; out.println(\"用户名或密码错误\"); &#125;else&#123; out.println(\"登录成功\"); &#125; &#125;&#125;#### 模型层实现(LoginDao)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.ajy.Model;import com.ajy.Entity.User;import java.sql.*;//模型层，用于处理登录操作public class LoginDao &#123; private static String DBUname = \"root\"; private static String DBUpwd = \"121181\"; private static String URL=\"jdbc:mysql://localhost:3306/anjiyubase?&amp;serverTimezone=UTC&amp;useSSL=false\"; public static int Login(User user)&#123; Connection con = null; PreparedStatement pstmt = null; ResultSet rs = null; int count = 0; try &#123; Class.forName(\"com.mysql.cj.jdbc.Driver\"); con = DriverManager.getConnection(URL,DBUname,DBUpwd); pstmt = con.prepareStatement(\"select count(*) from users where uanme = ? and upwd = ?\"); pstmt.setString(1,user.getUserName()); pstmt.setString(2,user.getUserPassword()); rs = pstmt.executeQuery(); if(rs.next())&#123; count = rs.getInt(1); &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); return -1; &#125; catch (SQLException e) &#123; e.printStackTrace(); return -1; &#125;finally &#123; try &#123; if (rs!=null)rs.close(); if (pstmt!=null)pstmt.close(); if (con!=null)con.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); return -1; &#125; &#125; if (count==0)&#123; return 0; &#125;else&#123; return 1; &#125; &#125;&#125;#### 用户实例(User)123456789101112131415161718192021222324252627282930313233package com.ajy.Entity;public class User &#123; private int id; private String UserName; private String UserPassword; public User(String UserName, String UserPassword)&#123; this.UserName=UserName; this.UserPassword=UserPassword; &#125; public User(int id, String UserName, String UserPassword)&#123; this.id=id; this.UserName=UserName; this.UserPassword=UserPassword; &#125; public String getUserName() &#123; return UserName; &#125; public void setUserName(String userName) &#123; UserName = userName; &#125; public String getUserPassword() &#123; return UserPassword; &#125; public void setUserPassword(String userPassword) &#123; UserPassword = userPassword; &#125;&#125;#### web.xml中的内容123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\"&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;login.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.ajy.Servlet.LoginServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/LoginServlet&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt;#### 数据库","categories":[{"name":"Demo","slug":"Demo","permalink":"https://henuajy.top/categories/Demo/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://henuajy.top/tags/Java/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://henuajy.top/tags/JavaWeb/"}]},{"title":"使用BottomNavigationView横屏时返回主页","slug":"使用BottomNavigationView横屏时返回主页","date":"2019-04-25T13:43:25.000Z","updated":"2019-05-16T07:43:22.172Z","comments":true,"path":"2019/04/25/使用BottomNavigationView横屏时返回主页/","link":"","permalink":"https://henuajy.top/2019/04/25/使用BottomNavigationView横屏时返回主页/","excerpt":"一、问题导入如图，“发现”页即为主页，然后我们切换到“我”页，一切正常。","text":"一、问题导入如图，“发现”页即为主页，然后我们切换到“我”页，一切正常。 那么问题来了，如果切换到“我”页后把手机横屏，则会出现下面的情况。 嗯？怎么又回到“发现”页了？？ 二、解决办法思考据自己了解，Android应用程序刷新页面有两种情况，第一种是用户操作；第二种非用户操作，即系统触发的。很明显这是系统触发的咯。然后，搬来Android应用程序生命周期图： 看到，在整个生命周期中，APP会调用onCreate()、onStart()、onResume()、onPause()、onStop()、onRestart()、onDestroy()这几个函数。所以，我在MainActivity.java中重构这几个函数，使用LogCat来验证在横屏的过程中，APP就调用了哪些函数。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879public class MainActivity extends AppCompatActivity &#123; private BottomNavigationView bottomNavigationView; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //隐藏默认的顶部导航 getSupportActionBar().hide(); //获取底部导航视图实例 bottomNavigationView = findViewById(R.id.bottomNavi); //把“发现”页作为主页 getSupportFragmentManager().beginTransaction().replace(R.id.contentFrame,new DiscoverFragment()).commit(); //注册底部导航按钮点击事件 bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() &#123; @Override public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) &#123; FragmentTransaction transition = getSupportFragmentManager().beginTransaction(); switch (menuItem.getItemId())&#123; case R.id.bottomNavi_discover: transition.replace(R.id.contentFrame,new DiscoverFragment()).commit(); break; case R.id.bottomNavi_friends: transition.replace(R.id.contentFrame,new FriendFragment()).commit(); break; case R.id.bottomNavi_communicate: transition.replace(R.id.contentFrame,new CommunicateFragment()).commit(); break; case R.id.bottomNavi_myself: transition.replace(R.id.contentFrame,new MeFragment()).commit(); break; &#125; return true; &#125; &#125;); Log.i(\"MainActivity\",\"onCreate()\"); &#125; @Override protected void onStart() &#123; super.onStart(); Log.i(\"MainActivity\",\"onStart()\"); &#125; @Override protected void onResume() &#123; super.onResume(); Log.i(\"MainActivity\",\"onResume()\"); &#125; @Override protected void onPause() &#123; super.onPause(); Log.i(\"MainActivity\",\"onPause()\"); &#125; @Override protected void onStop() &#123; super.onStop(); Log.i(\"MainActivity\",\"onStop()\"); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); Log.i(\"MainActivity\",\"onDestroy()\"); &#125; @Override protected void onRestart() &#123; super.onRestart(); Log.i(\"MainActivity\",\"onRestart()\"); &#125;&#125; 下面运行程序，横屏后，LogCat输出如下： 仔细观察发现，横屏后，程序再次调用了onCreate()函数，页面不刷新才怪勒！ 解决思路在横屏前，先保存当前浏览的数据，然后在横屏后，恢复这个数据就可以了。所以，添加一个信号量(全局变量)，用来保存当前浏览的页面位置（1，2，3，4） 1private int PageFlag = 1; 然后再加入如下代码，目的是在程序调用onDestroy()之前，通过onSaveInstanceState()函数保存当前的PageFlag值，在横屏后调用onRestoreInstanceState()时，恢复PageFlag的值，通过此方法恢复横屏前访问的页面。 1234567891011121314151617181920212223242526272829303132@Override protected void onSaveInstanceState(Bundle outState) &#123; super.onSaveInstanceState(outState); outState.putInt(\"KEY_PAGE_INDEX\",PageFlag); &#125;@Override protected void onRestoreInstanceState(Bundle savedInstanceState) &#123; super.onRestoreInstanceState(savedInstanceState); if (savedInstanceState!=null)&#123; PageFlag = savedInstanceState.getInt(\"KEY_PAGE_INDEX\"); FragmentTransaction transaction = getSupportFragmentManager().beginTransaction(); switch (PageFlag)&#123; case 1: transaction.replace(R.id.contentFrame,new DiscoverFragment()).commit(); PageFlag = 1; break; case 2: transaction.replace(R.id.contentFrame,new FriendFragment()).commit(); PageFlag = 2; break; case 3: transaction.replace(R.id.contentFrame,new CommunicateFragment()).commit(); PageFlag = 3; break; case 4: transaction.replace(R.id.contentFrame,new MeFragment()).commit(); PageFlag = 4; break; &#125; &#125; &#125; 再次横屏， OK，问题解决！ 注意此APP使用的是 《小黑盒APP》 中的资源，仅用于学习","categories":[{"name":"BUG","slug":"BUG","permalink":"https://henuajy.top/categories/BUG/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://henuajy.top/tags/Java/"},{"name":"Android","slug":"Android","permalink":"https://henuajy.top/tags/Android/"}]}]}